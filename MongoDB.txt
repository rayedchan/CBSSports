# Start MongoDB
mongodb # no authentication
mongodb --auth --dbpath /data/db  # Start Mongo with authentication
mongod --auth --replSet rs  # replica set in order to have oplog rs.initiate()

# Connect to MongoDB
mongo
mongo --port 27017 -u "admin" -p "Password1" --authenticationDatabase "admin"   # Connect to DB with user with auth db param
mongo mongodb://localhost:27017/test?authSource=admin --username admin

# Create user for db
use admin;
db.createUser(
  {
    user: "admin",
    pwd: "Password1",
    roles: ["readWrite", "readWriteAnyDatabase", "dbAdminAnyDatabase", "clusterAdmin"]
  }
)

db.createUser(
  {
    user: "admin",
    pwd: "Password1",
    roles: [ { role: "root", db: "admin" } ]
  }
)

# Drop user
db.dropUser("admin");

# Import sample data
mongoimport --db test --collection inventory \
       --authenticationDatabase admin --username <user> --password <password> \
       --drop --file ~/Downloads/inventory.crud.json

# Query collection
myCursor = db.<collectionName>.find({});
myCursor = db.inventory.find( { status: "D" } ) # With Filter
myCursor = db.inventory.find( { size: { h: 14, w: 21, uom: "cm" } } ) # Filter embedded object: match all fields in embedded object
myCursor = db.inventory.find( { "size.uom": "in" } ) # Filter specific field within embedded object

# Iterate cursor
while (myCursor.hasNext()) {
    print(tojson(myCursor.next()));
}

# Insert document into collection
db.inventory.insertOne(
   { "item" : "canvas",
     "qty" : 100,
     "tags" : ["cotton"],
     "size" : { "h" : 28, "w" : 35.5, "uom" : "cm" }
   }
);

# Insert multiple documents
db.inventory.insertMany([
   { "item": "chair", "qty": 25, "size": { "h": 7, "w": 10, "uom": "in" }, "status": "A" },
   { "item": "backpack", "qty": 50, "size": { "h": 80, "w": 60, "uom": "in" }, "status": "A" },
]);

# AND OR
myCursor = db.inventory.find( {
     status: "A",
     $or: [ { qty: { $lt: 30 } }, { item: /^p/ } ]
} )

# Update single document
db.inventory.updateOne(
    { "item" : "paper" }, // specifies the document to update
    {
      $set: {  "size.uom" : "cm",  "status" : "P" },
      $currentDate: { "lastModified": true }
    }
)

# Update multiple documents
db.inventory.updateMany(
    { "qty" : { $lt: 50 } }, // specifies the documents to update
    {
       $set: { "size.uom" : "cm", "status": "P" },
       $currentDate : { "lastModified": true }
    }
)

# Delete single document
db.inventory.deleteOne(
    { "status": "D" } // specifies the document to delete
)

# Delete multiple documents
db.inventory.deleteMany(
    { "status" : "A" } // specifies the documents to delete
)

# Use / Create database
use sports

# Display all collections
show collections;
db.getCollectionNames()

# Drop collection
db.<collectionName>.drop()

# Create collection
db.createCollection('<CollectionName>')

# Count number documents in a collection
db.<collectionName>.count()

# Aggregate functions
# $avg ignores non-numeric values, including missing values
db.baseball.aggregate([{$group: {_id : "$position", avg_age: {$avg: "$age"}}}])

